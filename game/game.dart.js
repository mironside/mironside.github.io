// Generated by dart2js, the Dart to JavaScript compiler version: 1.0.0.3_r30188.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "AutocompleteErrorEvent|DOMError|ErrorEvent|Event|FileError|MediaError|MediaKeyError|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedLength|SVGRect|SpeechRecognitionError|WebGLBuffer|WebGLProgram|WebGLShader|WebGLUniformLocation"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return false;
  },
  toString$0: function(receiver) {
    return "null";
  }
},

JavaScriptObject: {"": "Interceptor;"},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $isList: true
},

JSMutableArray: {"": "JSArray;",
  $asJSArray: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;"},

JSNumber: {"": "num/Interceptor;",
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $isString: true
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

objectHashCode: function(object) {
  if (typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return new H.invokeClosure_closure(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1))
    return new H.invokeClosure_closure0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2))
    return new H.invokeClosure_closure1(closure, arg1, arg2).call$0();
  else if (t1.$eq(numberOfArguments, 3))
    return new H.invokeClosure_closure2(closure, arg1, arg2, arg3).call$0();
  else if (t1.$eq(numberOfArguments, 4))
    return new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4).call$0();
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  }
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  }
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  }
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

FixedLengthListMixin: {"": "Object;"}}],
["dart.collection", "dart:collection", , P, {
_HashSet__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
},

HashSet_HashSet$identity: function() {
  return new P._IdentityHashSet(0, null, null, null, null);
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var rest = this._rest;
    if (rest == null)
      return false;
    return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
  },
  add$1: function(_, element) {
    var rest, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      rest = P._HashSet__newHashTable();
      this._rest = rest;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [element];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(element);
    }
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  }
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (bucket[i] === element)
        return i;
    return -1;
  }
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  }
},

IterableBase: {"": "Object;",
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  }
}}],
["dart.core", "dart:core", , P, {
Error_safeToString: function(object) {
  return H.Primitives_objectToString(object);
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

List_List: function($length) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

Error: {"": "Object;"},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + value + " not in range " + start + ".." + H.S(end));
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + P.Error_safeToString(this.modifiedObject) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    return "Exception: " + this.message;
  }
},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

}}],
["dart.dom.html", "dart:html", , W, {
HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMediaElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLVideoElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

CanvasElement: {"": "HtmlElement;",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  },
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": "CanvasRenderingContext2D;CanvasRenderingContext"},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;",
  toString$0: function(receiver) {
    return receiver.localName;
  },
  "%": "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGGraphicsElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement;Element"
},

EventTarget: {"": "Interceptor;", "%": ";EventTarget"},

FormElement: {"": "HtmlElement;length=", "%": "HTMLFormElement"},

Node: {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "%": "Document|HTMLDocument;Node"
},

SelectElement: {"": "HtmlElement;length=", "%": "HTMLSelectElement"},

Window: {"": "EventTarget;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMWindow|Window"
}}],
["dart.dom.web_gl", "dart:web_gl", , P, {
RenderingContext: {"": "CanvasRenderingContext;",
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program, shader);
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target, buffer);
  },
  bufferData$3: function(receiver, target, data_OR_size, usage) {
    return receiver.bufferData(target, data_OR_size, usage);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red, green, blue, alpha);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createBuffer$0: function(receiver) {
    return receiver.createBuffer();
  },
  createProgram$0: function(receiver) {
    return receiver.createProgram();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  disable$1: function(receiver, cap) {
    return receiver.disable(cap);
  },
  drawArrays$3: function(receiver, mode, first, count) {
    return receiver.drawArrays(mode, first, count);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program, $name);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program, pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(receiver, shader, pname) {
    return receiver.getShaderParameter(shader, pname);
  },
  getUniformLocation$2: function(receiver, program, $name) {
    return receiver.getUniformLocation(program, $name);
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader, string);
  },
  uniform4fv$2: function(receiver, $location, v) {
    return receiver.uniform4fv($location, v);
  },
  uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix4fv($location, transpose, array);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, width, height);
  },
  "%": "WebGLRenderingContext"
}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    if (index < 0 || index >= $length)
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + index));
  },
  "%": ";ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;"},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;"}}],
["", "game.dart", , D, {
makeOrthographic: function(width, height, near, far) {
  if (typeof width !== "number")
    throw H.iae(width);
  if (typeof height !== "number")
    throw H.iae(height);
  return [2 / width, 0, 0, 0, 0, -2 / height, 0, 0, 0, 0, -2 / (far - near), 0, 0, 0, 0, 1];
},

makeViewMatrix: function(px, py) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
  t1 = Math.cos(0.7853981633974483);
  t2 = Math.cos(1.0471975511965976);
  t3 = Math.sin(0.7853981633974483);
  t4 = Math.sin(1.0471975511965976);
  t5 = Math.sin(0.7853981633974483);
  t6 = Math.sin(0.7853981633974483);
  t7 = Math.cos(1.0471975511965976);
  t8 = Math.cos(0.7853981633974483);
  t9 = Math.sin(1.0471975511965976);
  t10 = Math.cos(0.7853981633974483);
  t11 = Math.sin(1.0471975511965976);
  t12 = Math.cos(1.0471975511965976);
  t13 = Math.cos(0.7853981633974483);
  t14 = Math.sin(0.7853981633974483);
  t15 = Math.cos(1.0471975511965976);
  t16 = Math.sin(0.7853981633974483);
  t17 = Math.cos(1.0471975511965976);
  return [t1, t2 * -t3, -t4 * -t5, 0, t6, t7 * t8, -t9 * t10, 0, 0, t11, t12, 0, px * t13 + py * t14, px * t15 * -t16 + py * t17 * Math.cos(0.7853981633974483), 32, 1];
},

createGroundTileBuffer: function(size) {
  var t1, t2;
  $.groundTileBuffer = J.createBuffer$0$x($.gl);
  J.bindBuffer$2$x($.gl, 34962, $.groundTileBuffer);
  t1 = -size;
  t2 = $.gl;
  t1 = new Float32Array([t1, t1, 0, t1, size, 0, size, t1, 0, size, size, 0]);
  t1.$dartCachedLength = t1.length;
  J.bufferData$3$x(t2, 34962, t1, 35044);
},

createLeftWallBuffer: function(size) {
  var t1, t2, t3;
  $.leftWallBuffer = J.createBuffer$0$x($.gl);
  J.bindBuffer$2$x($.gl, 34962, $.leftWallBuffer);
  t1 = -size;
  t2 = -1.62 * size;
  t3 = $.gl;
  t2 = new Float32Array([size, t1, 0, size, t1, t2, t1, t1, 0, t1, t1, t2]);
  t2.$dartCachedLength = t2.length;
  J.bufferData$3$x(t3, 34962, t2, 35044);
},

createRightWallBuffer: function(size) {
  var t1, t2, t3;
  $.rightWallBuffer = J.createBuffer$0$x($.gl);
  J.bindBuffer$2$x($.gl, 34962, $.rightWallBuffer);
  t1 = -size;
  t2 = -1.62 * size;
  t3 = $.gl;
  t2 = new Float32Array([size, t1, 0, size, t1, t2, size, size, 0, size, size, t2]);
  t2.$dartCachedLength = t2.length;
  J.bufferData$3$x(t3, 34962, t2, 35044);
},

createWireframeBuffer: function(size) {
  var t1, t2;
  $.wireframeBuffer = J.createBuffer$0$x($.gl);
  J.bindBuffer$2$x($.gl, 34962, $.wireframeBuffer);
  t1 = -size;
  t2 = $.gl;
  t1 = new Float32Array([t1, t1, 0, size, t1, 0, size, t1, 0, size, t1, -1.62 * size, size, t1, 0, size, size, 0]);
  t1.$dartCachedLength = t1.length;
  J.bufferData$3$x(t2, 34962, t1, 35044);
},

main: function() {
  var canvas, vs, fs, program, pMatrixUniform, mvMatrixUniform, color, pMatrix, t1, t2, mvMatrix, y, x, t3, t4, t5, t6, t7, t8, t9, t10;
  canvas = document.querySelector("#glcanvas");
  $.gl = J.getContext$1$x(canvas, "experimental-webgl");
  J.clearColor$4$x($.gl, 0, 0, 0, 1);
  J.disable$1$x($.gl, 2929);
  D.createGroundTileBuffer(32);
  D.createLeftWallBuffer(32);
  D.createRightWallBuffer(32);
  D.createWireframeBuffer(32);
  vs = J.createShader$1$x($.gl, 35633);
  J.shaderSource$2$x($.gl, vs, "    attribute vec3 aVertexPosition;\n\n    uniform mat4 uMVMatrix;\n    uniform mat4 uPMatrix;\n\n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n    }\n  ");
  J.compileShader$1$x($.gl, vs);
  if (J.getShaderParameter$2$x($.gl, vs, 35713) !== true) {
    window.alert(J.getShaderInfoLog$1$x($.gl, vs));
    return;
  }
  fs = J.createShader$1$x($.gl, 35632);
  J.shaderSource$2$x($.gl, fs, "    precision mediump float;\n    uniform vec4 color;\n\n    void main(void) {\n      gl_FragColor = color;\n    }\n  ");
  J.compileShader$1$x($.gl, fs);
  if (J.getShaderParameter$2$x($.gl, fs, 35713) !== true) {
    window.alert(J.getShaderInfoLog$1$x($.gl, fs));
    return;
  }
  program = J.createProgram$0$x($.gl);
  J.attachShader$2$x($.gl, program, vs);
  J.attachShader$2$x($.gl, program, fs);
  J.linkProgram$1$x($.gl, program);
  if (J.getProgramParameter$2$x($.gl, program, 35714) !== true)
    window.alert("Could not initialise shaders");
  $.posAttr = J.getAttribLocation$2$x($.gl, program, "aVertexPosition");
  J.enableVertexAttribArray$1$x($.gl, $.posAttr);
  pMatrixUniform = J.getUniformLocation$2$x($.gl, program, "uPMatrix");
  mvMatrixUniform = J.getUniformLocation$2$x($.gl, program, "uMVMatrix");
  color = J.getUniformLocation$2$x($.gl, program, "color");
  J.viewport$4$x($.gl, 0, 0, canvas.width, canvas.height);
  J.clear$1$ax($.gl, 16640);
  pMatrix = D.makeOrthographic(canvas.width, canvas.height, 0.1, 1000);
  J.useProgram$1$x($.gl, program);
  t1 = $.gl;
  t2 = new Float32Array(pMatrix);
  t2.$dartCachedLength = t2.length;
  J.uniformMatrix4fv$3$x(t1, pMatrixUniform, false, t2);
  mvMatrix = null;
  y = 0;
  while ($.get$map(), y < 8) {
    t1 = (y - 4 + 0.5) * 64;
    x = 0;
    while (true) {
      t2 = $.get$map();
      if (y < 0)
        throw H.ioore(t2, y);
      if (!(x < t2[y].length))
        break;
      c$1: {
        t2 = $.get$map()[y];
        if (x < 0 || x >= t2.length)
          throw H.ioore(t2, x);
        if (J.$eq(t2[x], 0))
          break c$1;
        t2 = $.get$map()[y].length;
        $.get$map();
        mvMatrix = D.makeViewMatrix((x - t2 / 2 + 0.5) * 64, t1);
        if (typeof 1 !== "number")
          throw H.iae(1);
        t2 = y - 1;
        t3 = t2 >= 0;
        if (t3) {
          t4 = $.get$map();
          if (t2 < 0 || t2 >= 8)
            throw H.ioore(t4, t2);
          t4 = t4[t2];
          if (x >= t4.length)
            throw H.ioore(t4, x);
          t4 = J.$eq(t4[x], 0);
        } else
          t4 = true;
        if (t4) {
          t4 = $.gl;
          t5 = $.get$colors();
          t6 = $.get$map()[y];
          if (x >= t6.length)
            throw H.ioore(t6, x);
          t6 = t6[x];
          if (t6 >>> 0 !== t6 || t6 >= 5)
            throw H.ioore(t5, t6);
          t6 = t5[t6];
          t5 = t6.length;
          if (0 >= t5)
            throw H.ioore(t6, 0);
          t7 = t6[0];
          if (typeof t7 !== "number")
            throw H.iae(t7);
          if (1 < 0 || 1 >= t5)
            throw H.ioore(t6, 1);
          t8 = t6[1];
          if (typeof t8 !== "number")
            throw H.iae(t8);
          if (2 >= t5)
            throw H.ioore(t6, 2);
          t9 = t6[2];
          if (typeof t9 !== "number")
            throw H.iae(t9);
          if (3 >= t5)
            throw H.ioore(t6, 3);
          t6 = new Float32Array([0.8 * t7, 0.8 * t8, 0.8 * t9, t6[3]]);
          t6.$dartCachedLength = t6.length;
          J.uniform4fv$2$x(t4, color, t6);
          t6 = $.gl;
          t4 = new Float32Array(mvMatrix);
          t4.$dartCachedLength = t4.length;
          J.uniformMatrix4fv$3$x(t6, mvMatrixUniform, false, t4);
          J.bindBuffer$2$x($.gl, 34962, $.leftWallBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 5, 0, 4);
          J.bindBuffer$2$x($.gl, 34962, $.wireframeBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 1, 0, 2);
        }
        t4 = x + 1;
        if (t4 < $.get$map()[y].length) {
          t5 = $.get$map()[y];
          if (t4 < 0 || t4 >= t5.length)
            throw H.ioore(t5, t4);
          t5 = J.$eq(t5[t4], 0);
        } else
          t5 = true;
        if (t5) {
          t5 = $.gl;
          t6 = $.get$colors();
          t7 = $.get$map()[y];
          if (x >= t7.length)
            throw H.ioore(t7, x);
          t7 = t7[x];
          if (t7 >>> 0 !== t7 || t7 >= 5)
            throw H.ioore(t6, t7);
          t7 = t6[t7];
          t6 = t7.length;
          if (0 >= t6)
            throw H.ioore(t7, 0);
          t8 = t7[0];
          if (typeof t8 !== "number")
            throw H.iae(t8);
          if (1 < 0 || 1 >= t6)
            throw H.ioore(t7, 1);
          t9 = t7[1];
          if (typeof t9 !== "number")
            throw H.iae(t9);
          if (2 >= t6)
            throw H.ioore(t7, 2);
          t10 = t7[2];
          if (typeof t10 !== "number")
            throw H.iae(t10);
          if (3 >= t6)
            throw H.ioore(t7, 3);
          t7 = new Float32Array([0.65 * t8, 0.65 * t9, 0.65 * t10, t7[3]]);
          t7.$dartCachedLength = t7.length;
          J.uniform4fv$2$x(t5, color, t7);
          t7 = $.gl;
          t5 = new Float32Array(mvMatrix);
          t5.$dartCachedLength = t5.length;
          J.uniformMatrix4fv$3$x(t7, mvMatrixUniform, false, t5);
          J.bindBuffer$2$x($.gl, 34962, $.rightWallBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 5, 0, 4);
        }
        t5 = $.gl;
        t6 = $.get$colors();
        t7 = $.get$map()[y];
        if (x >= t7.length)
          throw H.ioore(t7, x);
        t7 = t7[x];
        if (t7 >>> 0 !== t7 || t7 >= 5)
          throw H.ioore(t6, t7);
        t7 = t6[t7];
        t6 = t7.length;
        if (0 >= t6)
          throw H.ioore(t7, 0);
        t8 = t7[0];
        if (typeof t8 !== "number")
          throw H.iae(t8);
        if (1 < 0 || 1 >= t6)
          throw H.ioore(t7, 1);
        t9 = t7[1];
        if (typeof t9 !== "number")
          throw H.iae(t9);
        if (2 >= t6)
          throw H.ioore(t7, 2);
        t10 = t7[2];
        if (typeof t10 !== "number")
          throw H.iae(t10);
        if (3 >= t6)
          throw H.ioore(t7, 3);
        t7 = new Float32Array([1 * t8, 1 * t9, 1 * t10, t7[3]]);
        t7.$dartCachedLength = t7.length;
        J.uniform4fv$2$x(t5, color, t7);
        t7 = $.gl;
        t5 = new Float32Array(mvMatrix);
        t5.$dartCachedLength = t5.length;
        J.uniformMatrix4fv$3$x(t7, mvMatrixUniform, false, t5);
        J.bindBuffer$2$x($.gl, 34962, $.groundTileBuffer);
        J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
        J.drawArrays$3$x($.gl, 5, 0, 4);
        if (t3) {
          t5 = $.get$map();
          if (t2 < 0 || t2 >= 8)
            throw H.ioore(t5, t2);
          t5 = t5[t2];
          if (x >= t5.length)
            throw H.ioore(t5, x);
          t5 = J.$eq(t5[x], 0);
        } else
          t5 = true;
        if (t5) {
          t5 = $.gl;
          t6 = $.get$colors();
          t7 = $.get$map()[y];
          if (x >= t7.length)
            throw H.ioore(t7, x);
          t7 = t7[x];
          if (t7 >>> 0 !== t7 || t7 >= 5)
            throw H.ioore(t6, t7);
          t7 = t6[t7];
          t6 = t7.length;
          if (0 >= t6)
            throw H.ioore(t7, 0);
          t8 = t7[0];
          if (typeof t8 !== "number")
            throw H.iae(t8);
          if (1 >= t6)
            throw H.ioore(t7, 1);
          t9 = t7[1];
          if (typeof t9 !== "number")
            throw H.iae(t9);
          if (2 >= t6)
            throw H.ioore(t7, 2);
          t10 = t7[2];
          if (typeof t10 !== "number")
            throw H.iae(t10);
          if (3 >= t6)
            throw H.ioore(t7, 3);
          t7 = new Float32Array([0 * t8, 0 * t9, 0 * t10, t7[3]]);
          t7.$dartCachedLength = t7.length;
          J.uniform4fv$2$x(t5, color, t7);
          t7 = $.gl;
          t5 = new Float32Array(mvMatrix);
          t5.$dartCachedLength = t5.length;
          J.uniformMatrix4fv$3$x(t7, mvMatrixUniform, false, t5);
          J.bindBuffer$2$x($.gl, 34962, $.wireframeBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 1, 0, 2);
        }
        if (t4 < $.get$map()[y].length) {
          t5 = $.get$map()[y];
          if (t4 < 0 || t4 >= t5.length)
            throw H.ioore(t5, t4);
          t5 = J.$eq(t5[t4], 0);
        } else
          t5 = true;
        if (t5) {
          t5 = $.gl;
          t6 = $.get$colors();
          t7 = $.get$map()[y];
          if (x >= t7.length)
            throw H.ioore(t7, x);
          t7 = t7[x];
          if (t7 >>> 0 !== t7 || t7 >= 5)
            throw H.ioore(t6, t7);
          t7 = t6[t7];
          t6 = t7.length;
          if (0 >= t6)
            throw H.ioore(t7, 0);
          t8 = t7[0];
          if (typeof t8 !== "number")
            throw H.iae(t8);
          if (1 >= t6)
            throw H.ioore(t7, 1);
          t9 = t7[1];
          if (typeof t9 !== "number")
            throw H.iae(t9);
          if (2 >= t6)
            throw H.ioore(t7, 2);
          t10 = t7[2];
          if (typeof t10 !== "number")
            throw H.iae(t10);
          if (3 >= t6)
            throw H.ioore(t7, 3);
          t7 = new Float32Array([0 * t8, 0 * t9, 0 * t10, t7[3]]);
          t7.$dartCachedLength = t7.length;
          J.uniform4fv$2$x(t5, color, t7);
          t7 = $.gl;
          t5 = new Float32Array(mvMatrix);
          t5.$dartCachedLength = t5.length;
          J.uniformMatrix4fv$3$x(t7, mvMatrixUniform, false, t5);
          J.bindBuffer$2$x($.gl, 34962, $.wireframeBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 1, 4, 2);
        }
        if (t3) {
          t3 = $.get$map();
          if (t2 < 0 || t2 >= 8)
            throw H.ioore(t3, t2);
          t3 = t3[t2];
          if (x >= t3.length)
            throw H.ioore(t3, x);
          t3 = J.$eq(t3[x], 0);
        } else
          t3 = true;
        if (t3)
          if (t4 < $.get$map()[y].length) {
            t3 = $.get$map()[y];
            if (t4 < 0 || t4 >= t3.length)
              throw H.ioore(t3, t4);
            t3 = J.$eq(t3[t4], 0);
          } else
            t3 = true;
        else
          t3 = false;
        if (t3) {
          t3 = $.gl;
          t5 = $.get$colors()[4];
          t6 = t5.length;
          if (0 >= t6)
            throw H.ioore(t5, 0);
          t7 = t5[0];
          if (typeof t7 !== "number")
            throw H.iae(t7);
          if (1 >= t6)
            throw H.ioore(t5, 1);
          t8 = t5[1];
          if (typeof t8 !== "number")
            throw H.iae(t8);
          if (2 >= t6)
            throw H.ioore(t5, 2);
          t9 = t5[2];
          if (typeof t9 !== "number")
            throw H.iae(t9);
          if (3 >= t6)
            throw H.ioore(t5, 3);
          t5 = new Float32Array([0 * t7, 0 * t8, 0 * t9, t5[3]]);
          t5.$dartCachedLength = t5.length;
          J.uniform4fv$2$x(t3, color, t5);
          t5 = $.gl;
          t3 = new Float32Array(mvMatrix);
          t3.$dartCachedLength = t3.length;
          J.uniformMatrix4fv$3$x(t5, mvMatrixUniform, false, t3);
          J.bindBuffer$2$x($.gl, 34962, $.wireframeBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 1, 2, 2);
        }
        if (t2 >= 0)
          if (t4 < $.get$map()[y].length) {
            t3 = $.get$map();
            if (t2 >= 8)
              throw H.ioore(t3, t2);
            t3 = t3[t2];
            if (t4 < 0 || t4 >= t3.length)
              throw H.ioore(t3, t4);
            if (J.$eq(t3[t4], 0)) {
              t2 = $.get$map()[t2];
              if (x >= t2.length)
                throw H.ioore(t2, x);
              if (!J.$eq(t2[x], 0)) {
                t2 = $.get$map()[y];
                if (t4 >= t2.length)
                  throw H.ioore(t2, t4);
                t4 = !J.$eq(t2[t4], 0);
                t2 = t4;
              } else
                t2 = false;
            } else
              t2 = false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t2 = $.gl;
          t3 = $.get$colors()[4];
          t4 = t3.length;
          if (0 >= t4)
            throw H.ioore(t3, 0);
          t5 = t3[0];
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (1 >= t4)
            throw H.ioore(t3, 1);
          t6 = t3[1];
          if (typeof t6 !== "number")
            throw H.iae(t6);
          if (2 >= t4)
            throw H.ioore(t3, 2);
          t7 = t3[2];
          if (typeof t7 !== "number")
            throw H.iae(t7);
          if (3 >= t4)
            throw H.ioore(t3, 3);
          t3 = new Float32Array([0 * t5, 0 * t6, 0 * t7, t3[3]]);
          t3.$dartCachedLength = t3.length;
          J.uniform4fv$2$x(t2, color, t3);
          t3 = $.gl;
          t2 = new Float32Array(mvMatrix);
          t2.$dartCachedLength = t2.length;
          J.uniformMatrix4fv$3$x(t3, mvMatrixUniform, false, t2);
          J.bindBuffer$2$x($.gl, 34962, $.wireframeBuffer);
          J.vertexAttribPointer$6$x($.gl, $.posAttr, 3, 5126, false, 0, 0);
          J.drawArrays$3$x($.gl, 1, 2, 2);
        }
      }
      if (typeof 1 !== "number")
        throw H.iae(1);
      ++x;
    }
    if (typeof 1 !== "number")
      throw H.iae(1);
    ++y;
  }
}},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
// Runtime type support
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.JSInt_methods = J.JSInt.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.gl = null;
$.posAttr = null;
$.groundTileBuffer = null;
$.leftWallBuffer = null;
$.rightWallBuffer = null;
$.wireframeBuffer = null;
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.attachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bufferData$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferData$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.compileShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createProgram$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createProgram$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.disable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disable$1(receiver, a0);
};
J.drawArrays$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getProgramParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
J.getShaderInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
J.getShaderParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.linkProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
J.shaderSource$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.uniform4fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
J.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null);
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity();
});
Isolate.$lazy($, "map", "map", "get$map", function() {
  return [[1, 1, 2, 2, 4, 0, 0, 0], [0, 0, 0, 2, 4, 0, 0, 0], [0, 0, 0, 2, 1, 1, 4, 0], [0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1], [0, 3, 3, 0, 0, 0, 0, 1], [0, 3, 3, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1]];
});
Isolate.$lazy($, "colors", "colors", "get$colors", function() {
  return [[0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1], [0, 0, 1, 1], [1, 1, 1, 1]];
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { D.main(); });
  } else {
    D.main();
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    return Isolate;
  };
}
})()

//# sourceMappingURL=game.dart.js.map
//@ sourceMappingURL=game.dart.js.map
